{"version":3,"sources":["serviceWorker.js","index.js","Header.js","LK/auth.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","React","useState","port","setPort","teor","setTeor","pract","setPract","handlePort","handleTeor","handlePract","style","textAlign","margin","border","weight","Button","aria-controls","aria-haspopup","to","onClick","event","currentTarget","Menu","id","anchorEl","keepMounted","open","onClose","MenuItem","setAppState","axios","get","then","resp","allPersons","data","console","log","theme","createMuiTheme","palette","primary","main","className","ThemeProvider","TextField","label","variant","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dea6b088.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Header';\nimport LK from './LK/auth'\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n        <Switch>\n            <Route exact path='/' component={App}/>\n            <Route  path='/lk' component={LK}/>\n        </Switch>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Link } from \"react-router-dom\";\n\nexport default function SimpleMenu() {\n  const [port, setPort] = React.useState(null);\n  const [teor, setTeor] = React.useState(null);\n  const [pract, setPract] = React.useState(null);\n\n  const handleClickPort = (event) => {\n    setPort(event.currentTarget);\n  };\n\n  const handleClickTeor = (event) => {\n    setTeor(event.currentTarget);\n  };\n\n  const handleClickPract = (event) => {\n    setPract(event.currentTarget);\n  };\n\n  const handlePort = () => {\n    setPort(null);\n  };\n\n  const handleTeor = () => {\n    setTeor(null);\n  };\n\n  const handlePract = () => {\n    setPract(null);\n  };\n\n\n  return (\n    <div style={{textAlign: 'center', margin: \"17px auto\", border: \"45px\",  weight: '110%'}}>\n      {/*Кнопка на главную*/}\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n          <Link to={'/'} >Главная</Link>\n      </Button>\n      {/* Портфолио */}\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickPort}>\n          <a>Портфолио</a>\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={port}\n        keepMounted\n        open={Boolean(port)}\n        onClose={handlePort}>\n        <MenuItem onClick={handlePort}><Link to={\"/visit\"}>Визитная карточка</Link></MenuItem>\n        <MenuItem onClick={handlePort}><Link to={'advTraining'}>Курсы повышения квалификации</Link></MenuItem>\n      </Menu>\n        {/*  Теория  */}\n      <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickTeor}>\n        Теория\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={teor}\n        keepMounted\n        open={Boolean(teor)}\n        onClose={handleTeor}>\n        <MenuItem onClick={handleTeor}>Файлы/презентации</MenuItem>\n      </Menu>\n    {/*  Практические  */}\n    <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClickPract}>\n        Практические задания\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={pract}\n        keepMounted\n        open={Boolean(pract)}\n        onClose={handlePract}>\n        <MenuItem onClick={handlePract}>ППСС3 - техническая профиль</MenuItem>\n        <MenuItem onClick={handlePract}>ПССС3 - социальный профиль</MenuItem>\n        <MenuItem onClick={handlePract}>ППКРС - техническая профиль</MenuItem>\n        <MenuItem onClick={handlePract}>ППКРС - социальный профиль</MenuItem>\n      </Menu>\n     <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n        Самостоятельные работы\n      </Button>\n     <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n        Родителям\n     </Button>\n     <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n        Новости\n     </Button>\n     <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n        Контакты\n     </Button>\n        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n            <Link to={'/lk'}>Личный кабинет</Link>\n        </Button>\n    </div>\n  );\n}\n\n","import React, {useState} from 'react';\r\nimport './lk.css'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n} from '@material-ui/core/styles';\r\nimport axios from \"axios\";\r\n\r\nexport default function SimpleMenu() {\r\n    const [appState, setAppState] = useState();\r\n\r\n    const apiUrl = 'https://pokeapi.co/api/v2/pokemon/ditto'\r\n    axios.get(apiUrl).then((resp) => {\r\n        const allPersons = resp.data;\r\n        console.log(allPersons)\r\n    });\r\n\r\n    const handlePort = () => {\r\n    setAppState(null);\r\n  };\r\n\r\n    const handleClickPort = (event) => {\r\n    setAppState(event.currentTarget);\r\n    handlePort();\r\n  };\r\n\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            primary: {\r\n                main: '#7cbdc9'\r\n            }\r\n        },\r\n    });\r\n    return (\r\n        <div>\r\n            <div className='topAuth' style={{textAlign: 'center'}}>Авторизация</div>\r\n            <div style={{textAlign: 'center', margin: \"17px auto\"}}>\r\n                <form>\r\n                    <ThemeProvider theme={theme}>\r\n                        <TextField label={\"Логин\"} variant=\"outlined\"/>\r\n                    </ThemeProvider>\r\n                </form>\r\n            </div>\r\n            <div style={{textAlign: 'center'}}>\r\n                <form>\r\n                    <ThemeProvider theme={theme}>\r\n                        <TextField label={\"Пароль\"} variant='outlined'/>\r\n                    </ThemeProvider>\r\n                </form>\r\n            </div>\r\n            <div className='buttonAuth' style={{textAlign: 'center'}}>\r\n                <Button onClick={handleClickPort} variant=\"contained\">Войти</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}